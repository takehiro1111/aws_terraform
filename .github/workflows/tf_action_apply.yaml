name: Terraform Apply
run-name: ${{ github.workflow }} by @${{ github.actor }}

on:
  workflow_dispatch:
  pull_request:
    types: [closed]
    branches:
      - main    # mainブランチへのPRが対象
    paths:
      - 'master/**'

env:
  AWS_REGION: ap-northeast-1
  AQUA_ROOT_DIR: /home/runner/.local/share/aquaproj-aqua
  # TFACTION_CONFIG: tfaction-root.yaml
  # TFACTION_IS_APPLY: 'true'
  

permissions:
  id-token: write
  contents: read
  pull-requests: write
  actions: read

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      targets: ${{ steps.list-targets.outputs.targets }}
    timeout-minutes: 300
    if: ${{ ! contains(fromJson('["renovate[bot]", "dependabot[bot]"]'), github.actor) }}
    steps:
      - name: Checkout to the branch
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - uses: aquaproj/aqua-installer@ea518c135a02fc11ff8024364510c181a5c6b342 # v4.0.3
        with:
          aqua_version: v2.54.1

      # 変更のあった作業ディレクトリを取得
      - uses: suzuki-shunsuke/tfaction/list-targets@bf4e4fed5bfc227b0987bfb7a7de167a18158f74 # v1.19.3
        id: list-targets


  terraform-apply:
    needs: setup
    if: join(fromJSON(needs.setup.outputs.targets), '') != ''
    name: "terraform apply (${{ matrix.target.target }})"
    runs-on: ubuntu-latest
    timeout-minutes: 600
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.setup.outputs.targets) }}
    defaults:
      run:
        shell: bash

    # env:
    #   TFACTION_TARGET: ${{ matrix.target.target }}
    #   TFACTION_JOB_TYPE: terraform
    #   TFACTION_IS_APPLY: "true" # apply する場合は TFACTION_IS_APPLY を "true" に指定

    steps:
      - name: Checkout to the branch
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name:
        uses: aquaproj/aqua-installer@ea518c135a02fc11ff8024364510c181a5c6b342 # v4.0.3
        with:
          aqua_version: v2.54.1

      # - name: Generate Github token
      #   id: generate_token
      #   uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2
      #   with:
      #     app_id: ${{ secrets.APP_ID }}
      #     private_key: ${{ secrets.PRIVATE_KEY }}

      - name: Detect Terraform Version
        env:
          Environment: ${{ matrix.target.target }}
        id: get_tf_version
        run: |
          cd ${{ env.Environment }} &&
          TF_VERSION=$(cat .terraform-version)
          echo TF_VERSION=$TF_VERSION >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3
        id: setup_terraform
        with:
          terraform_version: ${{ steps.get_tf_version.outputs.TF_VERSION }}

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838 # v5
        with:
          aws-region: ${{env.AWS_REGION}}
          role-to-assume: ${{ secrets.MASTER_APPLY_ROLE }}
          role-session-name: GithubActions_AssumeRole

      - name: terraform init
        working-directory: ${{ matrix.target.target }}
        run: |
          terraform init -no-color
    
      - name: terraform apply
        working-directory: ${{ matrix.target.target }}
        run: |
          tfcmt apply -- terraform apply -auto-approve
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: terraform apply
      #   working-directory: ${{ matrix.target.target }}
      #   run: |
      #     terraform apply -auto-approve -no-color | tfnotify --config ${{ github.workspace }}/.tfnotify/slack.yaml apply --message "${{ matrix.target.target }} by @${{ github.actor }}"
      #   env:
      #     SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
      #     SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
      #     SLACK_BOT_NAME: ${{ github.repository }}

