name: waf_regionallimit_update
run-name: ${{ github.workflow }} by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      actions_target:
        description: 'Choice an Workflow Action'
        required: true
        default: ' '
        type: choice
        options:
          - 'Plan Rule False'
          - 'Apply Rule False'
          - 'Plan Rule True'
          - 'Apply Rule True'
          - ' '

env:
  AWS_REGION: ap-northeast-1
  WORKING_DIR: common/
  SLACK_ICON: terraform_logo.png

  aws_access_key_id: # actでの検証時に記載
  aws_secret_access_key: # actでの検証時に記載
  aws_session_token: # actでの検証時に記載

permissions:
  id-token: write
  actions: write
  contents: read

jobs:
##########################################################
# Rule Disable
##########################################################
  plan-false:
    name: Plan-False
    runs-on: ubuntu-latest
    if: ${{ inputs.actions_target == 'Plan Rule False' }}
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_FOR_WAF }}
          role-session-name: GithubActions_AssumeRole_${{ github.workflow }}_${{ github.job }}
          # actでの検証用
          aws-access-key-id: ${{env.aws_access_key_id}}
          aws-secret-access-key: ${{env.aws_secret_access_key}}
          aws-session-token: ${{env.aws_session_token}}

      - name: Get Terraform version
        id: get_tf_version
        run: |
          export TF_VERSION=$(cat .terraform-version)
          echo $TF_VERSION >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        id: setup_terraform
        env:
          TF_VERSION: ${{ steps.get_tf_version.outputs.TF_VERSION }}
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Init
        id: init
        if: ${{ steps.setup_terraform.outcome == 'success' }}
        continue-on-error: false
        run: terraform init

      - name: Plan
        id: plan
        if: ${{ steps.init.outcome == 'success' }}
        run: terraform plan -lock=false -var 'waf_rule_regional_limit=false' -target='aws_wafv2_web_acl.region_count[0]'

  apply-false:
    name: Apply-False
    runs-on: ubuntu-latest
    if: ${{ inputs.actions_target == 'Apply Rule False' }}
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_FOR_WAF }}
          role-session-name: GithubActions_AssumeRole_${{ github.workflow }}_${{ github.job }}
          # actでの検証用
          aws-access-key-id: ${{env.aws_access_key_id}}
          aws-secret-access-key: ${{env.aws_secret_access_key}}
          aws-session-token: ${{env.aws_session_token}}

      - name: Get Terraform version
        id: get_tf_version
        run: |
          TF_VERSION=$(cat .terraform-version)
          echo TF_VERSION=$TF_VERSION >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        id: setup_terraform
        with:
          terraform_version: ${{ steps.get_tf_version.outputs.TF_VERSION }}

      - name: Init
        id: init
        if: ${{ steps.setup_terraform.outcome == 'success' }}
        continue-on-error: false
        run: terraform init

      - name: Apply
        if: ${{ steps.init.outcome == 'success' }}
        run: terraform apply -lock=false -auto-approve -var 'waf_rule_regional_limit=false' -target='aws_wafv2_web_acl.region_count[0]'

##########################################################
# Rule Enable
##########################################################
  plan-true:
    name: Plan-True
    runs-on: ubuntu-latest
    if: ${{ inputs.actions_target == 'Plan Rule True' }}
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_FOR_WAF }}
          role-session-name: GithubActions_AssumeRole_${{ github.workflow }}_${{ github.job }}
          # actでの検証用
          aws-access-key-id: ${{env.aws_access_key_id}}
          aws-secret-access-key: ${{env.aws_secret_access_key}}
          aws-session-token: ${{env.aws_session_token}}

      - name: Get Terraform version
        id: get_tf_version
        run: |
          TF_VERSION=$(cat .terraform-version)
          echo TF_VERSION=$TF_VERSION >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        id: setup_terraform
        with:
          terraform_version: ${{ steps.get_tf_version.outputs.TF_VERSION }}

      - name: Init
        id: init
        if: ${{ steps.setup_terraform.outcome == 'success' }}
        continue-on-error: false
        run: terraform init

      - name: Plan
        id: plan
        if: ${{ steps.init.outcome == 'success' }}
        run: terraform plan -lock=false -var 'waf_rule_regional_limit=true' -target='aws_wafv2_web_acl.region_count[0]'

  apply-true:
    name: Apply-True
    runs-on: ubuntu-latest
    if: ${{ inputs.actions_target == 'Apply Rule True' }}
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_FOR_WAF }}
          role-session-name: GithubActions_AssumeRole_${{ github.workflow }}_${{ github.job }}
          # actでの検証用
          aws-access-key-id: ${{env.aws_access_key_id}}
          aws-secret-access-key: ${{env.aws_secret_access_key}}
          aws-session-token: ${{env.aws_session_token}}

      - name: Get Terraform version
        id: get_tf_version
        run: |
          TF_VERSION=$(cat .terraform-version)
          echo TF_VERSION=$TF_VERSION >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        id: setup_terraform
        with:
          terraform_version: ${{ steps.get_tf_version.outputs.TF_VERSION }}

      - name: Init
        id: init
        if: ${{ steps.setup_terraform.outcome == 'success' }}
        continue-on-error: false
        run: terraform init

      - name: Apply
        if: ${{ steps.init.outcome == 'success' }}
        run: terraform apply -lock=false -auto-approve -var 'waf_rule_regional_limit=true' -target='aws_wafv2_web_acl.region_count[0]'

##########################################################
# Notify Slack
##########################################################
  notify:
    name: Slack Notification
    runs-on: ubuntu-latest
    needs: [apply-false,apply-true]
    if:  always() && (needs.apply-false.result == 'success' || needs.apply-true.result == 'success')
    steps:
      - name: Get the Result of Apply
        uses: technote-space/workflow-conclusion-action@v3
        id: conclusion

      - name: Set Slack Title and Username
        id: define_slack_variables
        run: |
          if [[ "${{ needs.apply-false.result }}" == "success" ]]; then
            echo "SLACK_TITLE=RegionalLimit Disabled Successful 🚫" >> $GITHUB_OUTPUT
            echo "SLACK_USERNAME=WAF Apply False🚀" >> $GITHUB_OUTPUT
            echo "SLACK_MESSAGE=Working_Dir:${{ env.WORKING_DIR }}" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.apply-true.result }}" == "success" ]]; then
            echo "SLACK_TITLE=RegionalLimit Enabled Successful ✅" >> $GITHUB_OUTPUT
            echo "SLACK_USERNAME=WAF Apply True🚀" >> $GITHUB_OUTPUT
            echo "SLACK_MESSAGE=Working_Dir:${{ env.WORKING_DIR }}}" >> $GITHUB_OUTPUT
          fi
      
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL_NAME }}
          SLACK_COLOR: ${{ steps.conclusion.outputs.conclusion }}
          SLACK_USERNAME: ${{ steps.define_slack_variables.outputs.SLACK_USERNAME }}
          SLACK_MESSAGE: ${{ steps.define_slack_variables.outputs.SLACK_MESSAGE }}
          SLACK_ICON: ${{ env.SLACK_ICON }}
          SLACK_TITLE: ${{ steps.define_slack_variables.outputs.SLACK_TITLE }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_LAMBDA_NOTIFY }}
