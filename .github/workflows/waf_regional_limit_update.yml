name: waf_regionallimit_update
run-name: ${{ github.workflow }} triggered by ${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      actions_target:
        description: 'Choice an Workflow Action'
        required: true
        default: ' '
        type: choice
        options:
          - 'Plan RegionalLimit False'
          - 'Apply RegionalLimit False'
          - 'Plan RegionalLimit True'
          - 'Apply RegionalLimit True'
          - ' '

env:
  AWS_REGION: ap-northeast-1
  WORKING_DIR: common/

permissions:
  id-token: write
  actions: write
  contents: read

jobs:
##########################################################
# Rule Disable
##########################################################
  plan-false:
    name: Plan-False
    runs-on: ubuntu-latest
    if: ${{ inputs.actions_target == 'Plan RegionalLimit False' }}
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        # with:
        #   aws-access-key-id: ASIAWEK7DUFQQDTGD7OR
        #   aws-secret-access-key: dd6NgFqpOlBNkoWrqhPEaP27D8R89Ew2lVEHv9au
        #   aws-region: ap-northeast-1
        #   aws-session-token: IQoJb3JpZ2luX2VjECIaDmFwLW5vcnRoZWFzdC0xIkgwRgIhAO+Wub2lp9lsQWZ4JxNp4WE62FpZ2GYNBTLQtDGs56fBAiEA25ZBcRtiQDwDYvLGHDgNBJ89uLSF+rhNpsUSOOJeb+kq/AIIPBAAGgw0MjE2NDMxMzMyODEiDPcHnOiUCyWv+4pzqirZAiSTxJBOjMWZuSAdwACfsi/ZyoWZ9Mj0ZKZIMy9GKcu44neMKmnndr3cMRIO2hM/Ir7alonIQVX6Q68brkDNGMU+oqIKXr+QxP6OZYyBhG/eDSxyiz0cpLrDqhj3Bm+qBLd7BK13KAN+0P1JKuwMEcsfXcX+QU3FTiRN3SSaVMKiYcjPsqag8Ziehq0qXlOAMCRm48vAB9vCWJ0pSUJUUEzMpMol31Rn945ndsF4PBmkSm3j/fDvm8W+2bDGmSB2kQhuEg7RPAgmh6rG5/K8hDCG4w3W0S+HO+PfEnSsNB+yPeCUq8iS4zR66Xi4CfVkcaunHNvj6WxJXB5y3K0oNtXhUTbMQMZfaBye5BVcnL9H6M9o7ysLVph7Hxofk64d9D303rUo88baO5uwxRMfXUzGJZC5myffFBoEJlORHzXCTsn33yMn2D+jO5F6Q6SjYM1qPKWZ0i+u6zD4tr+2BjqmAX0P6FHFl8IwSjwkasIYez6KgH2NjaPToldyju1uzT8/OlI9mXEKikAzF3NT/Hp0Y3Hr+xH0E+ev1HqVnKWDZnhglkjneBsSY1HamFzk4imS6lRII76/AMq6l2HodsrmcVi0U5viJvK465CLscs0HZAn+3CAnLQCUYn+jnwP1oZvi/8eN7nXpbuD4ulHwNq9KLs39AR6gAVcqqeJjFiOcYYR+sJGmNo=
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_FOR_WAF }}
          role-session-name: GithubActions_AssumeRole_${{ github.workflow }}_${{ github.actor }}

      - name: Get Terraform version
        id: get_tf_version
        run: |
          TF_VERSION=$(cat .terraform-version)
          echo TF_VERSION=$TF_VERSION >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        id: setup_terraform
        with:
          terraform_version: ${{ steps.get_tf_version.outputs.TF_VERSION }}

      - name: Init
        id: init
        if: ${{ steps.setup_terraform.outcome == 'success' }}
        run: terraform init

      - name: Plan
        id: plan
        if: ${{ steps.init.outcome == 'success' }}
        continue-on-error: false
        run: terraform plan -lock=false -var 'waf_rule_regional_limit=false' -target='aws_wafv2_web_acl.region_count[0]'

  apply-false:
    name: Apply-False
    runs-on: ubuntu-latest
    # if: ${{ github.event.inputs.apply_false == 'true' }}
    if: ${{ inputs.actions_target == 'Apply RegionalLimit False' }}
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR}}
    outputs:
      work_dir: ${{ steps.set_output_working_directory.outputs.WORKING_DIR }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        # with:
        #   aws-access-key-id: ASIAWEK7DUFQQDTGD7OR
        #   aws-secret-access-key: dd6NgFqpOlBNkoWrqhPEaP27D8R89Ew2lVEHv9au
        #   aws-region: ap-northeast-1
        #   aws-session-token: IQoJb3JpZ2luX2VjECIaDmFwLW5vcnRoZWFzdC0xIkgwRgIhAO+Wub2lp9lsQWZ4JxNp4WE62FpZ2GYNBTLQtDGs56fBAiEA25ZBcRtiQDwDYvLGHDgNBJ89uLSF+rhNpsUSOOJeb+kq/AIIPBAAGgw0MjE2NDMxMzMyODEiDPcHnOiUCyWv+4pzqirZAiSTxJBOjMWZuSAdwACfsi/ZyoWZ9Mj0ZKZIMy9GKcu44neMKmnndr3cMRIO2hM/Ir7alonIQVX6Q68brkDNGMU+oqIKXr+QxP6OZYyBhG/eDSxyiz0cpLrDqhj3Bm+qBLd7BK13KAN+0P1JKuwMEcsfXcX+QU3FTiRN3SSaVMKiYcjPsqag8Ziehq0qXlOAMCRm48vAB9vCWJ0pSUJUUEzMpMol31Rn945ndsF4PBmkSm3j/fDvm8W+2bDGmSB2kQhuEg7RPAgmh6rG5/K8hDCG4w3W0S+HO+PfEnSsNB+yPeCUq8iS4zR66Xi4CfVkcaunHNvj6WxJXB5y3K0oNtXhUTbMQMZfaBye5BVcnL9H6M9o7ysLVph7Hxofk64d9D303rUo88baO5uwxRMfXUzGJZC5myffFBoEJlORHzXCTsn33yMn2D+jO5F6Q6SjYM1qPKWZ0i+u6zD4tr+2BjqmAX0P6FHFl8IwSjwkasIYez6KgH2NjaPToldyju1uzT8/OlI9mXEKikAzF3NT/Hp0Y3Hr+xH0E+ev1HqVnKWDZnhglkjneBsSY1HamFzk4imS6lRII76/AMq6l2HodsrmcVi0U5viJvK465CLscs0HZAn+3CAnLQCUYn+jnwP1oZvi/8eN7nXpbuD4ulHwNq9KLs39AR6gAVcqqeJjFiOcYYR+sJGmNo=
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_FOR_WAF }}
          role-session-name: GithubActions_AssumeRole_${{ github.workflow }}_${{ github.actor }}

      - name: Get Terraform version
        id: get_tf_version
        run: |
          TF_VERSION=$(cat .terraform-version)
          echo TF_VERSION=$TF_VERSION >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        id: setup_terraform
        with:
          terraform_version: ${{ steps.get_tf_version.outputs.TF_VERSION }}

      - name: Init
        id: init
        if: ${{ steps.setup_terraform.outcome == 'success' }}
        run: terraform init

      - name: Apply
        if: ${{ steps.init.outcome == 'success' }}
        continue-on-error: false
        run: terraform apply -lock=false -auto-approve -var 'waf_rule_regional_limit=false' -target='aws_wafv2_web_acl.region_count[0]'

##########################################################
# Rule Enable
##########################################################
  plan-true:
    name: Plan-True
    runs-on: ubuntu-latest
    # if: ${{ github.event.inputs.plan_true == 'true' }}
    if: ${{ inputs.actions_target == 'Plan RegionalLimit True' }}
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_FOR_WAF }}
          role-session-name: GithubActions_AssumeRole_${{ github.workflow }}_${{ github.actor }}

      - name: Get Terraform version
        id: get_tf_version
        run: |
          TF_VERSION=$(cat .terraform-version)
          echo TF_VERSION=$TF_VERSION >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        id: setup_terraform
        with:
          terraform_version: ${{ steps.get_tf_version.outputs.TF_VERSION }}

      - name: Init
        id: init
        if: ${{ steps.setup_terraform.outcome == 'success' }}
        run: terraform init

      - name: Plan
        id: plan
        if: ${{ steps.init.outcome == 'success' }}
        continue-on-error: false
        run: terraform plan -lock=false -var 'waf_rule_regional_limit=true' -target='aws_wafv2_web_acl.region_count[0]'

  apply-true:
    name: Apply-True
    runs-on: ubuntu-latest
    # if: ${{ github.event.inputs.apply_true == 'true' }}
    if: ${{ inputs.actions_target == 'Apply RegionalLimit True' }}
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR}}
    outputs:
      work_dir: ${{ steps.set_output_working_directory.outputs.WORKING_DIR }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        # with:
        #   aws-access-key-id: ASIAWEK7DUFQQDTGD7OR
        #   aws-secret-access-key: dd6NgFqpOlBNkoWrqhPEaP27D8R89Ew2lVEHv9au
        #   aws-region: ap-northeast-1
        #   aws-session-token: IQoJb3JpZ2luX2VjECIaDmFwLW5vcnRoZWFzdC0xIkgwRgIhAO+Wub2lp9lsQWZ4JxNp4WE62FpZ2GYNBTLQtDGs56fBAiEA25ZBcRtiQDwDYvLGHDgNBJ89uLSF+rhNpsUSOOJeb+kq/AIIPBAAGgw0MjE2NDMxMzMyODEiDPcHnOiUCyWv+4pzqirZAiSTxJBOjMWZuSAdwACfsi/ZyoWZ9Mj0ZKZIMy9GKcu44neMKmnndr3cMRIO2hM/Ir7alonIQVX6Q68brkDNGMU+oqIKXr+QxP6OZYyBhG/eDSxyiz0cpLrDqhj3Bm+qBLd7BK13KAN+0P1JKuwMEcsfXcX+QU3FTiRN3SSaVMKiYcjPsqag8Ziehq0qXlOAMCRm48vAB9vCWJ0pSUJUUEzMpMol31Rn945ndsF4PBmkSm3j/fDvm8W+2bDGmSB2kQhuEg7RPAgmh6rG5/K8hDCG4w3W0S+HO+PfEnSsNB+yPeCUq8iS4zR66Xi4CfVkcaunHNvj6WxJXB5y3K0oNtXhUTbMQMZfaBye5BVcnL9H6M9o7ysLVph7Hxofk64d9D303rUo88baO5uwxRMfXUzGJZC5myffFBoEJlORHzXCTsn33yMn2D+jO5F6Q6SjYM1qPKWZ0i+u6zD4tr+2BjqmAX0P6FHFl8IwSjwkasIYez6KgH2NjaPToldyju1uzT8/OlI9mXEKikAzF3NT/Hp0Y3Hr+xH0E+ev1HqVnKWDZnhglkjneBsSY1HamFzk4imS6lRII76/AMq6l2HodsrmcVi0U5viJvK465CLscs0HZAn+3CAnLQCUYn+jnwP1oZvi/8eN7nXpbuD4ulHwNq9KLs39AR6gAVcqqeJjFiOcYYR+sJGmNo=
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_FOR_WAF }}
          role-session-name: GithubActions_AssumeRole_${{ github.workflow }}_${{ github.actor }}

      - name: Get Terraform version
        id: get_tf_version
        run: |
          TF_VERSION=$(cat .terraform-version)
          echo TF_VERSION=$TF_VERSION >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        id: setup_terraform
        with:
          terraform_version: ${{ steps.get_tf_version.outputs.TF_VERSION }}

      - name: Init
        id: init
        if: ${{ steps.setup_terraform.outcome == 'success' }}
        run: terraform init

      - name: Apply
        if: ${{ steps.init.outcome == 'success' }}
        continue-on-error: false
        run: terraform apply -lock=false -auto-approve -var 'waf_rule_regional_limit=true' -target='aws_wafv2_web_acl.region_count[0]'

##########################################################
# Notify Slack
##########################################################
  notify:
    name: Slack Notification
    runs-on: ubuntu-latest
    needs: [apply-false,apply-true]
    if:  always() && (needs.apply-false.result == 'success' || needs.apply-true.result == 'success')
    steps:
      - name: Get the Result of Apply
        uses: technote-space/workflow-conclusion-action@v3
        id: conclusion

      - name: Set Slack Title and Username
        id: define_slack_variables
        run: |
          if [[ "${{ needs.apply-false.result }}" == "success" ]]; then
            echo "SLACK_TITLE=RegionalLimit Disabled Successful 🚫" >> $GITHUB_OUTPUT
            echo "SLACK_USERNAME=WAF Apply False🚀" >> $GITHUB_OUTPUT
            echo "SLACK_MESSAGE=Working Directory:${{ env.WORKING_DIR }}" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.apply-true.result }}" == "success" ]]; then
            echo "SLACK_TITLE=RegionalLimit Enabled Successful ✅" >> $GITHUB_OUTPUT
            echo "SLACK_USERNAME=WAF Apply True🚀" >> $GITHUB_OUTPUT
            echo "SLACK_MESSAGE=Working Directory:${{ env.WORKING_DIR }}}" >> $GITHUB_OUTPUT
          fi
      
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL_NAME }}
          SLACK_COLOR: ${{ steps.conclusion.outputs.conclusion }}
          SLACK_USERNAME: ${{ steps.define_slack_variables.outputs.SLACK_USERNAME }}
          SLACK_MESSAGE: ${{ steps.define_slack_variables.outputs.SLACK_MESSAGE }}
          # SLACK_ICON: ${{ env.SLACK_ICON }}
          SLACK_TITLE: ${{ steps.define_slack_variables.outputs.SLACK_TITLE }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_LAMBDA_NOTIFY }}
