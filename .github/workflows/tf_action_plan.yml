# name: terraform_plan_daily

# on:
#   workflow_dispatch:
#   schedule:
#     - cron:  '0 1 * * 1,2,3,4,5'

# permissions:
#   id-token: write
#   contents: read

# jobs:
#   setup:
#     runs-on: ubuntu-latest
#     outputs:
#       matrix: ${{ steps.list-targets.outputs.value }}
#     steps:
#       - uses: actions/checkout@v4

#       - uses: aquaproj/aqua-installer@v3.1.0
#         with:
#           aqua_version: v2.40.0

#       - name: get list-targets for production
#         id: list-targets
#         run: |
#           target_list=$(cat tfaction-root.yaml | yq e '.target_groups[] | select(.working_directory | contains("production")) | .working_directory' -r | jq -R -s 'split("\n")[:-1]' | jq -c)
#           echo "value=$target_list" >> $GITHUB_OUTPUT

#   terraform-plan:
#     needs: setup
#     name: "terraform-plan check ${{matrix.value}}"
#     runs-on: ubuntu-latest
#     strategy:
#       fail-fast: false
#       matrix:
#         value: ${{ fromJSON(needs.setup.outputs.matrix) }}
#     env:
#       TARGET: ${{matrix.value}}
#       TFACTION_JOB_TYPE: ${{matrix.target.job_type}}
#     steps:
#       - uses: actions/checkout@v4
#       - name: Generate token
#         id: generate_token
#         uses: tibdex/github-app-token@v2
#         with:
#           app_id: ${{ secrets.APP_ID }}
#           private_key: ${{ secrets.PRIVATE_KEY }}

#       - uses: aquaproj/aqua-installer@v3.1.0
#         with:
#           aqua_version: v2.40.0

#       - run: echo ${{matrix.value}}

#       - name: Get AWS Account
#         run: |
#           yq_output=$(yq -o=json '.target_groups' tfaction-root.yaml)
#           jq_output=$(echo "$yq_output" | jq -r --arg target "$TARGET" '.[] | select(.working_directory == $target)')
          
#           if [ -z "$jq_output" ]; then
#             echo "No matching target group found. Exiting."
#             exit 1
#           fi
          
#           account_id=$(echo "$jq_output" | jq -r '.terraform_plan_config.aws_assume_role_arn' | cut -c 14- | cut -c 1-12)
          
#           if [ -z "$account_id" ]; then
#             echo "account_id is empty, exiting"
#             exit 1
#           fi
          
#           echo "ACCOUNT_ID=$account_id" >> $GITHUB_ENV

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           role-to-assume: arn:aws:iam::${{ env.ACCOUNT_ID }}:role/terraform-github-actions
#           aws-region: ap-northeast-1

#       - name: Detect Terraform version
#         working-directory: ${{matrix.value}}
#         run: |
#           printf "TF_VERSION=%s" $(cat .terraform-version) >> $GITHUB_ENV

#       - name: Setup terraform
#         uses: hashicorp/setup-terraform@v3
#         with:
#           terraform_version: ${{ env.TF_VERSION }}

#       - name: terraform init
#         working-directory: ${{matrix.value}}
#         run: |
#           terraform init

#       # terraform plan にて差分がある場合、Slack通知を実施する
#       - name: Notify Difference Message
#         working-directory: ${{matrix.value}}
#         run: |
#           terraform plan -no-color --parallelism=100 2>&1 | grep -v -e ' Refreshing state\.\.\. ' -v -e ' Reading\.\.\.' -v -e ' Read complete ' > result.txt
#           if grep Plan: result.txt >/dev/null; then
#             cat result.txt | tfnotify --config ${{ github.workspace }}/.tfnotify/slack.yml plan --message "${{matrix.value}}にて差分あり"
#           fi
#         env:
#           SLACK_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
#           SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
#           SLACK_BOT_NAME: tf-notify-bot
#           GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
