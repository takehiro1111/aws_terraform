name: Terraform Plan
run-name: ${{ github.workflow }} by @${{ github.actor }}

on:
  workflow_dispatch:
  pull_request:
    types:
      - opened      # PR新規作成時
      - synchronize # PR更新時
      - reopened    # PR再オープン時
    branches:
      - main    # mainブランチへのPRが対象
    paths:
      - 'master/**'

env:
  AQUA_ROOT_DIR: /home/runner/.local/share/aquaproj-aqua
  TFACTION_CONFIG: tfaction-root.yaml
  AWS_REGION: ap-northeast-1

permissions:
  id-token: write
  contents: read
  pull-requests: write
  actions: read

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      targets: ${{ steps.list-targets.outputs.targets }}
    timeout-minutes: 300
    if: ${{ ! contains(fromJson('["renovate[bot]", "dependabot[bot]"]'), github.actor) }}
    steps:
      - name: Checkout to the branch
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - uses: aquaproj/aqua-installer@d1fe50798dbadd4eb5b98957290ca175f6b4870f # v4.0.2
        with:
          aqua_version: v2.53.9

      # 変更のあった作業ディレクトリを取得
      - uses: suzuki-shunsuke/tfaction/list-targets@80af9c060a3870868c12c31a674e9d8b26278118 # v1.19.1
        id: list-targets


  terraform-apply:
    needs: setup
    if: join(fromJSON(needs.setup.outputs.targets), '') != ''
    name: "terraform plan (${{ matrix.target.target }})"
    runs-on: ubuntu-latest
    timeout-minutes: 600
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.setup.outputs.targets) }}
    defaults:
      run:
        shell: bash

    env:
      TFACTION_TARGET: ${{ matrix.target.target }}
      TFACTION_JOB_TYPE: terraform
      TFACTION_IS_APPLY: "false" # apply する場合は TFACTION_IS_APPLY を "true" に指定

    steps:
      - name: Checkout to the branch
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: aquas install
        uses: aquaproj/aqua-installer@d1fe50798dbadd4eb5b98957290ca175f6b4870f # v4.0.2
        with:
          aqua_version: v2.53.9

      - name: Generate Github token
        id: generate_token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}

      - name: Detect Terraform Version
        env:
          Environment: ${{ matrix.target.target }}
        id: get_tf_version
        run: |
          cd ${{ env.Environment }} &&
          TF_VERSION=$(cat .terraform-version)
          echo TF_VERSION=$TF_VERSION >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3
        id: setup_terraform
        with:
          terraform_version: ${{ steps.get_tf_version.outputs.TF_VERSION }}

      # aquaでインストール済みのため不要。
      # - name: setup tfcmt
      #   env:
      #     TFCMT_VERSION: v4.14.1
      #   run: |
      #     wget "https://github.com/suzuki-shunsuke/tfcmt/releases/download/${TFCMT_VERSION}/tfcmt_linux_amd64.tar.gz" -O /tmp/tfcmt.tar.gz
      #     tar xzf /tmp/tfcmt.tar.gz -C /tmp
      #     mv /tmp/tfcmt /usr/local/bin
      #     tfcmt --version

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a # v4
        with:
          aws-region: ${{env.AWS_REGION}}
          role-to-assume: ${{ secrets.MASTER_APPLY_ROLE }}
          role-session-name: GithubActions_AssumeRole

      - name: terraform init
        working-directory: ${{ matrix.target.target }}
        id: init
        run: |
          terraform init -no-color

      - name: terraform plan
        working-directory: ${{ matrix.target.target }}
        if: ${{ steps.init.outcome == 'success' }}
        run: |
          tfcmt plan -patch -- terraform plan -no-color -input=false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Slack Notification
      #   uses: rtCamp/action-slack-notify@c33737706dea87cd7784c687dadc9adf1be59990 # v2.3.2
      #   if: failure() 
      #   env:
      #     SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL_NAME }}
      #     SLACK_COLOR: danger
      #     SLACK_USERNAME: ${{ github.workflow }}
      #     SLACK_TITLE:  ${{ matrix.target.target }}
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_LAMBDA_NOTIFY }}

